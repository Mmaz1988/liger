-replace(true);

//ASPECT
#g TNS-ASP #h PROG '+_'
==>
#h SEM #m & #m ASPECT #i & #i VAR #j & #i RESTR #k &
 #m ASP-RESTR #a &
 #a GLUE [/s_s.[/t_s.ongoing(t,s)]] : (#j -o (#k -o #i)).

 //ASPECT
 #g TNS-ASP #h PROG '-_'
 ==>
 #h SEM #m & #m ASPECT #i & #i VAR #j & #i RESTR #k &
  #m ASP-RESTR #a &
  #a GLUE [/s_s.[/t_s.partof(t,s)]] : (#j -o (#k -o #i)).

//EVENT
#g TNS-ASP #h & #g PRED %h & #h SEM #k ASPECT #m RESTR #l ==> #g SEM #i & #i EV #j.

//TENSE
#a TNS-ASP #b TENSE 'past' & #b SEM #c & #a SEM #d  ==> #c TENSE #f & #f TT #e & #f GLUE [/P_<s,t>.[/s_s.Er_s[before(r,s) \& P(r)]]] : ((#e -o #d) -o (#f -o #d)).

//TENSE
#a TNS-ASP #b TENSE 'past' & #b SEM #c & #a SEM #d &
#c TENSE #e TT #f &
#a ^(COMP) #g TNS-ASP #h TENSE 'past'
==> #e GLUE {[/P_<s,t>.[/s_s.P(s)]],[/P_<s,t>.[/s_s.Er_s[before(r,s) \& P(r)]]]} : ((#f -o #d) -o (#e -o #d)).

//ASPECT2 (PROGRESSIVE)
#g TNS-ASP #h SEM #k ASPECT #o RESTR #l & #o VAR #m &
#h PROG '+_' &
#k TENSE #a TT #b &
#g SEM #i EV #j
==> #o GLUE [/M_<s,<s,t>>.[/P_<s,t>.[/s_s.Az_s[M(s)(z) -> P(z)]]]] : ((#m -o (#l -o #o)) -o ((#o -o #i) -o (#b -o #i))).

//ASPECT2 (PERFECTIVE)
#g TNS-ASP #h SEM #k ASPECT #o RESTR #l & #o VAR #m &
#h PROG '-_' &
#k TENSE #a TT #b &
#g SEM #i EV #j
==> #o GLUE [/M_<s,<s,t>>.[/P_<s,t>.[/s_s.Ez_s[M(s)(z) \& P(z)]]]] : ((#m -o (#l -o #o)) -o ((#o -o #i) -o (#b -o #i))).

#g NTYPE #h & #g PRED %g
==> #g SEM #i & #i GLUE strip(%g) : #i.

//NP Quantifier -- Sem structure
#g ^(SPEC) #h & #g QUANT #i & #h SEM #l ==> #l VAR #j & #l RESTR #k & #l SIT #s.
#g ^(SPEC) #h & #g DET #i & #h SEM #l ==> #l VAR #j & #l RESTR #k & #l SIT #s.

//NP Quantifier instantiation
#g ^(SPEC) #h SEM #i VAR #j & #i RESTR #k & #i SIT #s &
#g QUANT #l PRED %l & %l == 'every' &
#h ^(%) #m SEM #n &
#m TNS-ASP #a SEM #c ASPECT #b
==> #i GLUE [/P_<e,<s,t>>.[/Q_<e,<s,t>>.[/s_s.Ex_e[P(x)(s) \& Q(x)(s)]]]] : ((#j -o (#s -o #k)) -o ((#i -o (#b -o #n)) -o (#b -o #n))).

#g ^(SPEC) #h SEM #i VAR #j & #i RESTR #k & #i SIT #s &
#g DET #l PRED %l &
#h ^(%) #m SEM #n &
#m TNS-ASP #a SEM #c ASPECT #b
==> #i SIT #s & #i GLUE [/P_<e,<s,t>>.[/Q_<e,<s,t>>.[/s_s.Ax_e[P(x)(s) -> Q(x)(s)]]]] : ((#j -o (#s -o #k)) -o ((#i -o (#b -o #n)) -o (#b -o #n))).

//SUBJ predicates for Quantifiers
#g SEM #j VAR #i & #j RESTR #k & #j SIT #a & #g PRED %g ==>#g GLUE [/x_e.[/s_s.strip(%g)(x,s)] : (#i -o (#a -o #k)).


#a TNS-ASP #b & #a PRED %a & #a SUBJ #c & #a OBJ #d & strip(%a) == 'kiss' ==>
#a FPS #e &
#e initP #f &
#f INIT #a &
#f I-SUBJ #c &
#e procP #g &
#g PROC #a &
#g P-SUBJ #d &
#e XP #h &
#h REF 'unspec' &
#h TYPE 'rheme'.

#a TNS-ASP #b & #a PRED %a & #a SUBJ #c & #a OBJ #d & strip(%a) == 'visit' ==>
#a FPS #e &
#e initP #f &
#f INIT #a &
#f I-SUBJ #c &
#e procP #g &
#g PROC #a &
#g P-SUBJ #c &
#e XP #h &
#h REF 'unspec' &
#h TYPE 'rheme'.

#a XP #b REF 'unspec' & #b TYPE 'rheme' ==> #b GLUE y : #b.

#a FPS #b procP #c PROC #d & #c P-SUBJ #e & #b XP #f TYPE 'rheme' & #a PRED %a ==>
#c GLUE [/y_s.[/x_e.[/e_v.(strip(%a)(e) \& proc(e,x,y))]]] : (#f -o (#e -o (#d -o #c))).

#a FPS #b initP #c I-SUBJ #d & #c INIT #h & #b procP #e PROC #f & #e P-SUBJ #g & #a PRED %a ==>
#c GLUE [/P_<v,t>.[/x_e.[/e_v.Ee1_v[Ee2_v[strip(%a)(e1) \& (equals(e,to(e1,e2)) \& (init(e1,x) \& P(e2)))]]]]] : ((#f -o #e) -o (#d -o (#h -o #c))).

#a FPS #b initP #c I-SUBJ #d & #c INIT #h & #b procP #e PROC #f & #e P-SUBJ #d & #a PRED %a ==>
#c GLUE [/P_<e,<v,t>>.[/x_e.[/e_v.Ee1_v[Ee2_v[strip(%a)(e1) \& (equals(e,to(e1,e2)) \& (init(e1,x) \& P(x)(e2)))]]]]] : ((#d -o (#f -o #e)) -o (#d -o (#h -o #c))).

#a SUBJ #b & #a OBJ #c & #a TNS-ASP #d & #a PRED %a &
#a FPS #e procP #f P-SUBJ #c SEM #j &
#e initP #h INIT #i & #h I-SUBJ #b SEM #k ==>
#e GLUE [/R_<e,<e,<v,t>>>.[/x_e.[/y_e.Ee_v[(strip(%a)(e) \& (R(x)(y)(e) \& (ag(e,x) \& pt(e,y))))]]]] : ((#b -o (#c -o (#i -o #h))) -o (#k -o (#j -o #a))).

#a SUBJ #b & #a OBJ #c & #a TNS-ASP #d & #a PRED %a &
#a FPS #e procP #f P-SUBJ #b SEM #j &
#e initP #h INIT #i & #h I-SUBJ #b SEM #j &
#c SEM #k
 ==>
#e GLUE [/R_<e,<v,t>>.[/x_e.[/y_e.Ee_v[(strip(%a)(e) \& (R(x)(e) \& (ag(e,x) \& pt(e,y))))]]]] : ((#b -o (#i -o #h)) -o (#j -o (#k -o #a)))).

#a TNS-ASP #b & #a FPS #c & #a SEM #f &
#b SEM #d ASPECT #e
==> #d GLUE [/P_t.[/s_s.exemplify(s,P)]] : (#a -o (#e -o #f)).
