-replace(true);


//ASPECT
#g TNS-ASP #h PROG '+_'
==>
#h SEM #m & #m ASPECT #i & #i VAR #j & #i RESTR #k &
 #m ASP-RESTR #a &
 #a GLUE [/s_s.[/t_s.ongoing(t,s)]] : (#j -o (#k -o #i)).

 //ASPECT
 #g TNS-ASP #h PROG '-_'
 ==>
 #h SEM #m & #m ASPECT #i & #i VAR #j & #i RESTR #k &
  #m ASP-RESTR #a &
  #a GLUE [/s_s.[/t_s.partof(t,s)]] : (#j -o (#k -o #i)).

//EVENT
#g TNS-ASP #h & #g PRED %h & #h SEM #k ASPECT #m RESTR #l ==> #g SEM #i & #i EV #j & #i GLUE [/e_v.[/s_s.strip(%h)(e,s)]] : (#j -o (#l -o #i)).

//TENSE
#a TNS-ASP #b TENSE 'past' & #b SEM #c & #a SEM #d  ==> #c TENSE #f & #f TT #e & #f GLUE [/P_<s,t>.[/s_s.Er_s[before(r,s) \& P(r)]]] : ((#e -o #d) -o (#f -o #d)).

//TENSE
#a TNS-ASP #b TENSE 'past' & #b SEM #c & #a SEM #d &
#c TENSE #e TT #f &
#a ^(COMP) #g TNS-ASP #h TENSE 'past'
==> #e GLUE {[/P_<s,t>.[/s_s.P(s)]],[/P_<s,t>.[/s_s.Er_s[before(r,s) \& P(r)]]]} : ((#f -o #d) -o (#e -o #d)).

//ASPECT2 (PROGRESSIVE)
#g TNS-ASP #h SEM #k ASPECT #o RESTR #l & #o VAR #m &
#h PROG '+_' &
#k TENSE #a TT #b &
#g SEM #i EV #j
==> #o GLUE [/M_<s,<s,t>>.[/P_<s,t>.[/s_s.Az_s[M(s)(z) -> P(z)]]]] : ((#m -o (#l -o #o)) -o ((#o -o #i) -o (#b -o #i))).

//ASPECT2 (PERFECTIVE)
#g TNS-ASP #h SEM #k ASPECT #o RESTR #l & #o VAR #m &
#h PROG '-_' &
#k TENSE #a TT #b &
#g SEM #i EV #j
==> #o GLUE [/M_<s,<s,t>>.[/P_<s,t>.[/s_s.Ez_s[M(s)(z) \& P(z)]]]] : ((#m -o (#l -o #o)) -o ((#o -o #i) -o (#b -o #i))).

#g NTYPE #h & #g PRED %g
==> #g SEM #i & #i GLUE strip(%g) : #i.

//NP Quantifier -- Sem structure
#g ^(SPEC) #h & #g QUANT #i & #h SEM #l ==> #l VAR #j & #l RESTR #k & #l SIT #s.
#g ^(SPEC) #h & #g DET #i & #h SEM #l ==> #l VAR #j & #l RESTR #k & #l SIT #s.

//NP Quantifier instantiation
#g ^(SPEC) #h SEM #i VAR #j & #i RESTR #k & #i SIT #s &
#g QUANT #l PRED %l & %l == 'every' &
#h ^(%) #m SEM #n &
#m TNS-ASP #a SEM #c ASPECT #b
==> #i GLUE [/P_<e,<s,t>>.[/Q_<e,<s,t>>.[/s_s.Ex_e[P(x)(s) \& Q(x)(s)]]]] : ((#j -o (#s -o #k)) -o ((#i -o (#b -o #n)) -o (#b -o #n))).

#g ^(SPEC) #h SEM #i VAR #j & #i RESTR #k & #i SIT #s &
#g DET #l PRED %l &
#h ^(%) #m SEM #n &
#m TNS-ASP #a SEM #c ASPECT #b
==> #i SIT #s & #i GLUE [/P_<e,<s,t>>.[/Q_<e,<s,t>>.[/s_s.Ax_e[P(x)(s) -> Q(x)(s)]]]] : ((#j -o (#s -o #k)) -o ((#i -o (#b -o #n)) -o (#b -o #n))).

//SUBJ predicates for Quantifiers
#g SEM #j VAR #i & #j RESTR #k & #j SIT #a & #g PRED %g ==>#g GLUE [/x_e.[/s_s.strip(%g)(x,s)] : (#i -o (#a -o #k)).

//Verb template for intransitive verbs
#g SEM #j EV #n &
#g SUBJ #h SEM #i &
#g TNS-ASP #a SEM #b ASPECT #c RESTR #d ==> #g GLUE [/R_<v,<s,t>>.[/x_e.[/s_s.Ee_v[R(e)(s) \& agent(e,x)]]]] : ((#n -o (#d -o #j)) -o (#i -o (#c -o #j))).

//Verb template for transitive verbs
#g SEM #j EV #n &
#g SUBJ #h SEM #i &
#g OBJ #l SEM #m &
#g TNS-ASP #a SEM #b ASPECT #c RESTR #d ==> #g GLUE [/R_<v,<s,t>>.[/x_e.[/y_e.[/s_s.Ee_v[R(e)(s) \& (agent(e,x) \& theme(e,y))]]]]] : ((#n -o (#d -o #j)) -o (#i -o (#m -o (#c -o #j))).

//Verb template for comp verbs
#g SEM #j EV #n &
#g SUBJ #h SEM #i &
#g COMP #l TNS-ASP #o SEM #m TENSE #e &
#l SEM #s &
#g TNS-ASP #a SEM #b ASPECT #c RESTR #d ==> #g GLUE [/R_<v,<s,t>>.[/P_<s,t>.[/x_e.[/s_s.Ee_v[R(e)(s) \& (agent(e,x) \& theme(e,P(s)))]]]]] : ((#n -o (#d -o #j)) -o ((#e -o #s) -o (#i -o (#c -o #j)))).

