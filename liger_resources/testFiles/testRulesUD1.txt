-replace(true);

#a POS VBZ ==> #a SEM #b & #b EV #c.
#a POS VBD ==> #a SEM #b & #b EV #c.

#b SEM #c EV #d & #b LEMMA %b ==> #d GLUE [/e_v.%b(e)] :  (#d -o #c).

//NPs

//proper names
#a POS NNP & #a TOKEN %a ==> #a SEM #b & #b GLUE %a : #b.

//Setup for Quantifier
#a ^(det) #b ==> #b SEM #c & #c VAR #d & #c RESTR #e.

//predicative NP (scope of quantifier)
#a SEM #b VAR #c & #b RESTR #d & #a TOKEN %a ==> #a GLUE [/x_e.%a(x)] : (#c -o #d).

#a ^(det) #b SEM #c VAR #d & #c RESTR #e &
#a TOKEN %a & %a == a &
#b ^(%) #f SEM #g
==> #c GLUE [/P_<e,t>.[/Q_<e,t>.Ex_e[P(x) \& Q(x)]]] : ((#d -o #e) -o ((#c -o #g) -o #g)).

#a ^(det) #b SEM #c VAR #d & #c RESTR #e &
#a TOKEN %a & %a == every &
#b ^(%) #f SEM #g
==> #c GLUE [/P_<e,t>.[/Q_<e,t>.Ax_e[P(x) -> Q(x)]]] : ((#d -o #e) -o ((#c -o #g) -o #g)).

#a SEM #b EV #c &
#a nsubj #d SEM #e &
==> #b GLUE [/R_<v,t>.[/x_e.Ee_v[R(e) \& agent(e,x)]]] : ((#c -o #b) -o (#e -o #b)).

#a SEM #b EV #c &
#a nsubj #d SEM #e &
#a obj #f SEM #g
==> #b GLUE [/R_<v,t>.[/x_e.[/y_e.Ee_v[R(e) \& (agent(e,x) \& theme(e,y))]]]] : ((#c -o #b) -o (#e -o (#g -o #b))).

